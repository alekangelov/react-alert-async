{"version":3,"sources":["icon.png","../../src/alertSystem/Alert.tsx","../../src/alertSystem/AlertProvider.tsx","App.jsx","index.tsx"],"names":["module","exports","prompt","parent","document","styles","Promise","render","React","onClick","e","resolve","reject","text","confirm","alert","require","unmountComponentAtNode","CustomAlert","props","useState","animation","setAnimation","promptState","setPrompt","handleClick","value","setTimeout","console","className","style","animationDuration","onChange","type","id","alertProvider","Alert","state","setState","code","setCode","a","duration","x","log","showLineNumbers","language","Prompt","Confirm","Footer","href","Styling","Installation","App","role","src","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.ac80954f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icon.b03f83cd.png\";","import React, { useState } from 'react'\nconst { render, unmountComponentAtNode } = require('react-dom')\nimport styles from '../scss/alert.scss'\ninterface AlertProps {\n  text: string\n  cancellable?: boolean\n  onClick: (value: boolean | string) => void\n  className: string\n  duration: number\n  prompt?: boolean\n  confirm?: boolean\n  title?: string\n}\ninterface Options {\n  className: string\n  title?: string\n  duration: number\n}\n\nconst CustomAlert = (props: AlertProps) => {\n  const [animation, setAnimation] = useState<any>(styles.animationIn)\n  const [promptState, setPrompt] = useState('')\n  const handleClick = (value: boolean) => {\n    const parent = document.getElementById(styles.alertProvider) as HTMLElement\n    if (props.prompt) {\n      if (value) {\n        props.onClick(promptState)\n      } else {\n        props.onClick(value)\n      }\n    } else {\n      props.onClick(value)\n    }\n    setAnimation(styles.animationOut)\n    setTimeout(() => {\n      unmountComponentAtNode(parent)\n    }, (props.duration || 500) - 50)\n  }\n  React.useEffect(() => {\n    setTimeout(() => setAnimation(styles.animationHold), props.duration || 500)\n  }, [])\n  console.log(props)\n  return (\n    <div className={[styles.alert, 'alert'].join(' ')}>\n      <div\n        style={{ animationDuration: `${(props.duration || 500) / 1000}s` }}\n        className={[styles['alert-inner'], 'alert-inner', animation].join(' ')}\n      >\n        {props.title ? (\n          <h4 className='alert-title'>{props.title}</h4>\n        ) : (\n          <h4 className='alert-title'>\n            <React.Fragment>\n              {props.prompt && 'Please fill in the input'}\n              {props.confirm && 'Please confirm'}\n              {!props.prompt && !props.confirm && 'Alert'}\n            </React.Fragment>\n          </h4>\n        )}\n        <p className='alert-text'>{props.text}</p>\n        {props.prompt && (\n          <div className={styles.prompt}>\n            <input\n              value={promptState}\n              onChange={(e) => setPrompt(e.target.value)}\n              className={[styles.input, 'alert-input'].join(' ')}\n              type='text'\n            />\n          </div>\n        )}\n        <div className={[styles.buttons, 'alert-buttons'].join(' ')}>\n          <button\n            className={[styles.ok, 'alert-buttons_ok'].join(' ')}\n            onClick={() => handleClick(true)}\n          >\n            OK\n          </button>\n          {(props.confirm || props.prompt) && (\n            <button\n              className={[styles.cancel, 'alert-buttons_cancel'].join(' ')}\n              onClick={() => handleClick(false)}\n            >\n              Cancel\n            </button>\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport async function alert(text: string, options: Options) {\n  const parent = document.getElementById(styles.alertProvider) as HTMLElement\n  return new Promise((resolve, reject) => {\n    render(\n      <CustomAlert\n        onClick={(e) => (e ? resolve(e) : reject(e))}\n        text={text}\n        prompt={false}\n        {...options}\n      />,\n      parent\n    )\n  })\n}\nexport async function confirm(text: string, options: Options) {\n  const parent = document.getElementById(styles.alertProvider) as HTMLElement\n  return new Promise((resolve, reject) => {\n    render(\n      <CustomAlert\n        onClick={(e) => (e ? resolve(e) : reject(e))}\n        text={text}\n        confirm={true}\n        {...options}\n      />,\n      parent\n    )\n  })\n}\nexport async function prompt(text: string, options: Options) {\n  const parent = document.getElementById(styles.alertProvider) as HTMLElement\n  return new Promise((resolve, reject) => {\n    render(\n      <CustomAlert\n        onClick={(e) => (e ? resolve(e) : reject())}\n        text={text}\n        prompt={true}\n        {...options}\n      />,\n      parent\n    )\n  })\n}\n","import React from 'react'\nimport styles from '../scss/alert.scss'\nexport default function AlertProvider() {\n  return <div id={styles.alertProvider} className='Alert-provider'></div>\n}\n","import React, { useState } from 'react'\nimport AlertProvider, { alert, confirm, prompt } from 'react-alert-async'\nimport 'react-alert-async/dist/index.css'\n\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter'\nimport * as styles from 'react-syntax-highlighter/dist/esm/styles/prism'\n\nfunction Alert() {\n  const [state, setState] = useState(\"Nothing's been alerted\")\n  const [code, setCode] = useState(false)\n  const codestring = `async () => {\n    try {\n      const x = await alert('Something')\n      console.log(x)\n      setState('Yay, so you read all that')\n    } catch (e) {\n      // won't actually get here\n    }\n    // now that was simple?\n  }`\n  return (\n    <section>\n      <h2>Alerts</h2>\n      <p>Alerts are simple, you have to click yes on them</p>\n      <div className='state'>\n        <p>{state}</p>\n      </div>\n      <div className='buttons'>\n        <button\n          onClick={async () => {\n            try {\n              const x = await alert('Idk write something meaningful here', {\n                duration: 500\n              })\n              console.log(x)\n              setState('Yay, so you read all that')\n            } catch (e) {\n              console.log('here2')\n              setState(\"Oh, we're sorry about that :(\")\n            }\n          }}\n        >\n          Make an alert\n        </button>\n        <button onClick={() => setCode((code) => !code)}>\n          {code ? 'Hide' : 'Show'} Code\n        </button>\n      </div>\n      {code && (\n        <SyntaxHighlighter\n          showLineNumbers\n          style={styles.a11yDark}\n          language='javascript'\n        >\n          {codestring}\n        </SyntaxHighlighter>\n      )}\n    </section>\n  )\n}\nfunction Prompt() {\n  const [state, setState] = useState(\"Nothing's been prompted\")\n  const [code, setCode] = useState(false)\n  const codestring = `async () => {\n    try {\n      const x = await prompt(\"What's your name?\")\n      setState('Your name is: ' + x)\n    } catch (e) {\n      setState('Oh dang, we didnt get your name :(')\n    }\n  }`\n  return (\n    <section>\n      <h2>Prompts</h2>\n      <p>\n        Prompts are like confirms, but you get what the user typed in the box.\n        Or the user can deny them.\n      </p>\n      <div className='state'>\n        <p>{state}</p>\n      </div>\n      <div className='buttons'>\n        <button\n          onClick={async () => {\n            try {\n              const x = await prompt(\"What's your name?\")\n              setState('Your name is: ' + x)\n            } catch (e) {\n              setState('Oh dang, we didnt get your name :(')\n            }\n          }}\n        >\n          Make a prompt\n        </button>\n        <button onClick={() => setCode((code) => !code)}>\n          {code ? 'Hide' : 'Show'} Code\n        </button>\n      </div>\n      {code && (\n        <SyntaxHighlighter\n          showLineNumbers\n          style={styles.a11yDark}\n          language='javascript'\n        >\n          {codestring}\n        </SyntaxHighlighter>\n      )}\n    </section>\n  )\n}\nfunction Confirm() {\n  const [state, setState] = useState(\"Nothing's been confirmed, nor denied\")\n  const [code, setCode] = useState(false)\n  const codestring = `async () => {\n    try {\n      await confirm(\"Read some of the things we've written\")\n      setState('Yay, so you read all that')\n    } catch (e) {\n      setState(\"Oh, we're sorry about that :(\")\n    }\n  }`\n  return (\n    <section>\n      <h2>Confirms</h2>\n      <p>Confirms are pretty self explanatory. You can confirm or deny them.</p>\n      <div className='state'>\n        <p>{state}</p>\n      </div>\n      <div className='buttons'>\n        <button\n          onClick={async () => {\n            try {\n              await confirm(\"Read some of the things we've written\")\n              setState('Yay, so you read all that')\n            } catch (e) {\n              setState(\"Oh, we're sorry about that :(\")\n            }\n          }}\n        >\n          Make a confirm\n        </button>\n        <button onClick={() => setCode((code) => !code)}>\n          {code ? 'Hide' : 'Show'} Code\n        </button>\n      </div>\n      {code && (\n        <SyntaxHighlighter\n          showLineNumbers\n          style={styles.a11yDark}\n          language='javascript'\n        >\n          {codestring}\n        </SyntaxHighlighter>\n      )}\n    </section>\n  )\n}\n\nfunction Footer() {\n  return (\n    <footer>\n      <div className='first'>\n        <p>Developed and Maintained by Alek Angelov</p>\n      </div>\n      <ul className='second'>\n        <li>\n          <a href='http://npmjs.com/package/react-alert-async'>NPM</a>\n        </li>\n        <li>\n          <a href='https://github.com/alekangelov/react-alert-async/'>GITHUB</a>\n        </li>\n        <li>\n          <a href='https://alekangelov.com'>WEBSITE</a>\n        </li>\n      </ul>\n    </footer>\n  )\n}\n\nfunction Styling() {\n  return (\n    <section>\n      <h2>Styling</h2>\n      <p>\n        It's pretty easy to style the components, they follow simple naming\n        structures and it's encouraged to write your own styles.\n      </p>\n      <SyntaxHighlighter language='css' style={styles.a11yDark}>\n        {`.alert {\n  /* this is the background of the alert */\n  &-inner {\n    /* body wrapper of the alert */\n  }\n  &-title {\n    /* title of the alert */\n  }\n  &-text {\n    /* text describer of the alert */\n  }\n  &-input {\n    /* the prompt input field */\n  }\n  &-buttons {\n    /* button wrapper of the alert */\n    &_ok {\n      /* ok button of the alert */\n    }\n    &_cancel {\n      /* cancel button of the alert */\n    }\n  }\n}`}\n      </SyntaxHighlighter>\n    </section>\n  )\n}\n\nfunction Installation() {\n  return (\n    <section>\n      <h2>Installation and Usage</h2>\n      <p>Honestly, it's as simple as one two three.</p>\n      <SyntaxHighlighter language='bash' style={styles.a11yDark}>\n        {`yarn add react-alert-async`}\n      </SyntaxHighlighter>\n      <p>And then in your little index file you just add the Provider</p>\n      <SyntaxHighlighter language='javascript' style={styles.a11yDark}>\n        {`import AlertProvider, {alert, confirm, prompt} from 'react-alert-async';\nimport 'react-alert-async/dist/index.css'\n\nfunction App() {\n  return (\n    <>\n      <AlertProvider />\n      <button onClick={()=>alert(\"Yay, it's an alert\", {duration: 2000, title: \"Custom Title\"})} />\n    </>\n  )\n}`}\n      </SyntaxHighlighter>\n    </section>\n  )\n}\n\nconst App = () => {\n  const [state, setState] = useState(\"Nothing's been prompted\")\n  return (\n    <>\n      <AlertProvider />\n      <div className='wrapper'>\n        <h1>\n          <span role='icon'>\n            <img src={require('./icon.png')} />\n          </span>{' '}\n          React Alert Async\n        </h1>\n        <h2>\n          A simple way of managing your alerts, prompts and confirms without\n          defaulting to the browsers ugly implementations\n        </h2>\n        <div className='sections'>\n          <Installation />\n          <Alert />\n          <Confirm />\n          <Prompt />\n          <Styling />\n        </div>\n        <Footer />\n      </div>\n    </>\n  )\n}\n\nexport default App\n","import './styles/index.scss'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}