{"version":3,"sources":["icon.png","../../src/alertSystem/Alert.tsx","../../src/alertSystem/AlertProvider.tsx","App.jsx","index.tsx"],"names":["module","exports","require","unmountComponentAtNode","CustomAlert","props","useState","styles","close","useCallback","parent","document","setAnimation","setTimeout","handleClick","value","console","setPrompt","promptState","eventListener","e","React","window","className","style","animationDuration","prompt","name","onChange","type","onClick","a","Promise","render","resolve","reject","text","confirm","id","alertProvider","Alert","state","setState","code","setCode","alert","duration","showLineNumbers","language","AlertWithCustomBody","Component","Prompt","x","Confirm","Footer","href","Styling","Installation","App","role","src","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.0e3213ec.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icon.b03f83cd.png\";","import React, {\n  useState,\n  FunctionComponent,\n  ComponentClass,\n  useCallback\n} from 'react'\nconst { render, unmountComponentAtNode } = require('react-dom')\nimport styles from '../scss/alert.scss'\ninterface AlertProps {\n  text: string | FunctionComponent | ComponentClass\n  onClick: (value: boolean | string) => void\n  className: string\n  duration: number\n  prompt?: boolean\n  confirm?: boolean\n  title?: string\n}\ninterface Options {\n  className: string\n  title?: string\n  duration: number\n}\n\nconst CustomAlert = (props: AlertProps) => {\n  const [animation, setAnimation] = useState<any>(styles.animationIn)\n  const [promptState, setPrompt] = useState('')\n  const close = useCallback(() => {\n    const parent = document.getElementById(styles.alertProvider) as HTMLElement\n    setAnimation(styles.animationOut)\n    setTimeout(() => {\n      unmountComponentAtNode(parent)\n    }, (props.duration || 500) - 50)\n  }, [])\n  const handleClick = useCallback(\n    (value: boolean) => {\n      console.log(promptState)\n      if (props.prompt) {\n        setPrompt((promptState) => {\n          if (value) {\n            props.onClick(promptState)\n          } else {\n            props.onClick(value)\n          }\n          return promptState\n        })\n      } else {\n        props.onClick(value)\n      }\n      return close()\n    },\n    [promptState]\n  )\n  const eventListener = (e: KeyboardEvent) => {\n    if (e.key === 'Escape') {\n      handleClick(props.confirm || props.prompt ? false : true)\n    }\n    if (e.key === 'Enter') {\n      handleClick(true)\n    }\n  }\n  React.useEffect(() => {\n    window.addEventListener('keyup', eventListener)\n    setTimeout(() => setAnimation(styles.animationHold), props.duration || 500)\n    return () => {\n      window.removeEventListener('keyup', eventListener)\n    }\n  }, [])\n  return (\n    <div className={[styles.alert, 'alert'].join(' ')}>\n      <div\n        style={{ animationDuration: `${(props.duration || 500) / 1000}s` }}\n        className={[styles['alert-inner'], 'alert-inner', animation].join(' ')}\n      >\n        {typeof props.text === 'function' ? (\n          <props.text />\n        ) : (\n          <React.Fragment>\n            {props.title ? (\n              <h4 className='alert-title'>{props.title}</h4>\n            ) : (\n              <h4 className='alert-title'>\n                <React.Fragment>\n                  {props.prompt && 'Please fill in the input'}\n                  {props.confirm && 'Please confirm'}\n                  {!props.prompt && !props.confirm && 'Alert'}\n                </React.Fragment>\n              </h4>\n            )}\n            <p className='alert-text'>{props.text}</p>\n            {props.prompt && (\n              <div className={styles.prompt}>\n                <input\n                  value={promptState}\n                  name='prompt'\n                  onChange={(e) => setPrompt(e.target.value)}\n                  className={[styles.input, 'alert-input'].join(' ')}\n                  type='text'\n                />\n              </div>\n            )}\n          </React.Fragment>\n        )}\n        <div className={[styles.buttons, 'alert-buttons'].join(' ')}>\n          <button\n            className={[styles.ok, 'alert-buttons_ok'].join(' ')}\n            onClick={() => handleClick(true)}\n          >\n            OK\n          </button>\n          {(props.confirm || props.prompt) && (\n            <button\n              className={[styles.cancel, 'alert-buttons_cancel'].join(' ')}\n              onClick={() => handleClick(false)}\n            >\n              Cancel\n            </button>\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport async function alert(\n  text: string | FunctionComponent | ComponentClass,\n  options: Options\n) {\n  const parent = document.getElementById(styles.alertProvider) as HTMLElement\n  return new Promise((resolve, reject) => {\n    render(\n      <CustomAlert\n        onClick={(e) => (e ? resolve(e) : reject(e))}\n        text={text}\n        prompt={false}\n        {...options}\n      />,\n      parent\n    )\n  })\n}\nexport async function confirm(text: string, options: Options) {\n  const parent = document.getElementById(styles.alertProvider) as HTMLElement\n  return new Promise((resolve, reject) => {\n    render(\n      <CustomAlert\n        onClick={(e) => (e ? resolve(e) : reject(e))}\n        text={text}\n        confirm={true}\n        {...options}\n      />,\n      parent\n    )\n  })\n}\nexport async function prompt(text: string, options: Options) {\n  const parent = document.getElementById(styles.alertProvider) as HTMLElement\n  return new Promise((resolve, reject) => {\n    render(\n      <CustomAlert\n        onClick={(e) => (e ? resolve(e) : reject())}\n        text={text}\n        prompt={true}\n        {...options}\n      />,\n      parent\n    )\n  })\n}\n","import React from 'react'\nimport styles from '../scss/alert.scss'\nexport default function AlertProvider() {\n  return <div id={styles.alertProvider} className='Alert-provider'></div>\n}\n","import React, { useState } from 'react'\nimport AlertProvider, { alert, confirm, prompt } from 'react-alert-async'\nimport 'react-alert-async/dist/index.css'\n\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter'\nimport * as styles from 'react-syntax-highlighter/dist/esm/styles/prism'\n\nfunction Alert() {\n  const [state, setState] = useState(\"Nothing's been alerted\")\n  const [code, setCode] = useState(false)\n  const codestring = `async () => {\n    try {\n      const x = await alert('Something')\n      \n      setState('Yay, so you read all that')\n    } catch (e) {\n      // won't actually get here\n    }\n    // now that was simple?\n  }`\n  return (\n    <section>\n      <h2>Alerts</h2>\n      <p>Alerts are simple, you have to click yes on them</p>\n      <div className='state'>\n        <p>{state}</p>\n      </div>\n      <div className='buttons'>\n        <button\n          onClick={async () => {\n            try {\n              const x = await alert('Idk write something meaningful here', {\n                duration: 500\n              })\n\n              setState('Yay, so you read all that')\n            } catch (e) {\n              setState(\"Oh, we're sorry about that :(\")\n            }\n          }}\n        >\n          Make an alert\n        </button>\n        <button onClick={() => setCode((code) => !code)}>\n          {code ? 'Hide' : 'Show'} Code\n        </button>\n      </div>\n      {code && (\n        <SyntaxHighlighter\n          showLineNumbers\n          style={styles.a11yDark}\n          language='javascript'\n        >\n          {codestring}\n        </SyntaxHighlighter>\n      )}\n    </section>\n  )\n}\n\nfunction AlertWithCustomBody() {\n  const [state, setState] = useState(\"Nothing's been alerted\")\n  const [code, setCode] = useState(false)\n  const codestring = `<button\n  onClick={async () => {\n    try {\n      const x = await alert(\n        () => (\n          <div>\n            <h1>I'm the title?</h1>\n            <p>\n              Lorem ipsum dolor sit amet consectetur, adipisicing elit.\n              Esse, id sunt nulla nam praesentium necessitatibus\n              voluptate consequatur, nesciunt ut cupiditate distinctio\n              natus dolorem debitis adipisci non deleniti dolores rem\n              vitae.\n            </p>\n          </div>\n        ),\n        {\n          duration: 500\n        }\n      )\n\n      setState('Yay, so you read all that')\n    } catch (e) {\n      setState(\"Oh, we're sorry about that :(\")\n    }\n  }}\n>\n  Make a Funcitonal Alert\n</button>\n<button\n  onClick={async () => {\n    try {\n      const x = await alert(\n        class extends React.Component {\n          render() {\n            return (\n              <div>\n                <h1>I'm the title?</h1>\n                <p>\n                  Lorem ipsum dolor sit amet consectetur, adipisicing\n                  elit. Esse, id sunt nulla nam praesentium\n                  necessitatibus voluptate consequatur, nesciunt ut\n                  cupiditate distinctio natus dolorem debitis adipisci\n                  non deleniti dolores rem vitae.\n                </p>\n              </div>\n            )\n          }\n        },\n        {\n          duration: 500\n        }\n      )\n\n      setState('Yay, so you read all that')\n    } catch (e) {\n      setState(\"Oh, we're sorry about that :(\")\n    }\n  }}\n>\n  Make a Class Alert\n</button>`\n  return (\n    <section>\n      <h2>Functional/Class Alerts</h2>\n      <p>\n        If you pass in a react function or a class instead of text, the whole\n        body of the component including the title will get replaced by the\n        function/class. This allows you to write better alerts/confirms/prompts\n        while getting all the benefits that React offer you. You can do this\n        with the other alerts, not just the alert().\n      </p>\n      <div className='state'>\n        <p>{state}</p>\n      </div>\n      <div className='buttons'>\n        <button\n          onClick={async () => {\n            try {\n              const x = await alert(\n                () => (\n                  <div>\n                    <h1>I'm the title?</h1>\n                    <p>\n                      Lorem ipsum dolor sit amet consectetur, adipisicing elit.\n                      Esse, id sunt nulla nam praesentium necessitatibus\n                      voluptate consequatur, nesciunt ut cupiditate distinctio\n                      natus dolorem debitis adipisci non deleniti dolores rem\n                      vitae.\n                    </p>\n                  </div>\n                ),\n                {\n                  duration: 500\n                }\n              )\n\n              setState('Yay, so you read all that')\n            } catch (e) {\n              setState(\"Oh, we're sorry about that :(\")\n            }\n          }}\n        >\n          Make a Funcitonal Alert\n        </button>\n        <button\n          onClick={async () => {\n            try {\n              const x = await alert(\n                class extends React.Component {\n                  render() {\n                    return (\n                      <div>\n                        <h1>I'm the title?</h1>\n                        <p>\n                          Lorem ipsum dolor sit amet consectetur, adipisicing\n                          elit. Esse, id sunt nulla nam praesentium\n                          necessitatibus voluptate consequatur, nesciunt ut\n                          cupiditate distinctio natus dolorem debitis adipisci\n                          non deleniti dolores rem vitae.\n                        </p>\n                      </div>\n                    )\n                  }\n                },\n                {\n                  duration: 500\n                }\n              )\n\n              setState('Yay, so you read all that')\n            } catch (e) {\n              setState(\"Oh, we're sorry about that :(\")\n            }\n          }}\n        >\n          Make a Class Alert\n        </button>\n        <button onClick={() => setCode((code) => !code)}>\n          {code ? 'Hide' : 'Show'} Code\n        </button>\n      </div>\n      {code && (\n        <SyntaxHighlighter\n          showLineNumbers\n          style={styles.a11yDark}\n          language='javascript'\n        >\n          {codestring}\n        </SyntaxHighlighter>\n      )}\n    </section>\n  )\n}\n\nfunction Prompt() {\n  const [state, setState] = useState(\"Nothing's been prompted\")\n  const [code, setCode] = useState(false)\n  const codestring = `async () => {\n    try {\n      const x = await prompt(\"What's your name?\")\n      setState('Your name is: ' + x)\n    } catch (e) {\n      setState('Oh dang, we didnt get your name :(')\n    }\n  }`\n  return (\n    <section>\n      <h2>Prompts</h2>\n      <p>\n        Prompts are like confirms, but you get what the user typed in the box.\n        Or the user can deny them.\n      </p>\n      <div className='state'>\n        <p>{state}</p>\n      </div>\n      <div className='buttons'>\n        <button\n          onClick={async () => {\n            try {\n              const x = await prompt(\"What's your name?\")\n              setState('Your name is: ' + x)\n            } catch (e) {\n              setState('Oh dang, we didnt get your name :(')\n            }\n          }}\n        >\n          Make a prompt\n        </button>\n        <button onClick={() => setCode((code) => !code)}>\n          {code ? 'Hide' : 'Show'} Code\n        </button>\n      </div>\n      {code && (\n        <SyntaxHighlighter\n          showLineNumbers\n          style={styles.a11yDark}\n          language='javascript'\n        >\n          {codestring}\n        </SyntaxHighlighter>\n      )}\n    </section>\n  )\n}\nfunction Confirm() {\n  const [state, setState] = useState(\"Nothing's been confirmed, nor denied\")\n  const [code, setCode] = useState(false)\n  const codestring = `async () => {\n    try {\n      await confirm(\"Read some of the things we've written\")\n      setState('Yay, so you read all that')\n    } catch (e) {\n      setState(\"Oh, we're sorry about that :(\")\n    }\n  }`\n  return (\n    <section>\n      <h2>Confirms</h2>\n      <p>Confirms are pretty self explanatory. You can confirm or deny them.</p>\n      <div className='state'>\n        <p>{state}</p>\n      </div>\n      <div className='buttons'>\n        <button\n          onClick={async () => {\n            try {\n              await confirm(\"Read some of the things we've written\")\n              setState('Yay, so you read all that')\n            } catch (e) {\n              setState(\"Oh, we're sorry about that :(\")\n            }\n          }}\n        >\n          Make a confirm\n        </button>\n        <button onClick={() => setCode((code) => !code)}>\n          {code ? 'Hide' : 'Show'} Code\n        </button>\n      </div>\n      {code && (\n        <SyntaxHighlighter\n          showLineNumbers\n          style={styles.a11yDark}\n          language='javascript'\n        >\n          {codestring}\n        </SyntaxHighlighter>\n      )}\n    </section>\n  )\n}\n\nfunction Footer() {\n  return (\n    <footer>\n      <div className='first'>\n        <p>Developed and Maintained by Alek Angelov</p>\n      </div>\n      <ul className='second'>\n        <li>\n          <a href='http://npmjs.com/package/react-alert-async'>NPM</a>\n        </li>\n        <li>\n          <a href='https://github.com/alekangelov/react-alert-async/'>GITHUB</a>\n        </li>\n        <li>\n          <a href='https://alekangelov.com'>WEBSITE</a>\n        </li>\n      </ul>\n    </footer>\n  )\n}\n\nfunction Styling() {\n  return (\n    <section>\n      <h2>Styling</h2>\n      <p>\n        It's pretty easy to style the components, they follow simple naming\n        structures and it's encouraged to write your own styles.\n      </p>\n      <SyntaxHighlighter language='css' style={styles.a11yDark}>\n        {`.alert {\n  /* this is the background of the alert */\n  &-inner {\n    /* body wrapper of the alert */\n  }\n  &-title {\n    /* title of the alert */\n  }\n  &-text {\n    /* text describer of the alert */\n  }\n  &-input {\n    /* the prompt input field */\n  }\n  &-buttons {\n    /* button wrapper of the alert */\n    &_ok {\n      /* ok button of the alert */\n    }\n    &_cancel {\n      /* cancel button of the alert */\n    }\n  }\n}`}\n      </SyntaxHighlighter>\n    </section>\n  )\n}\n\nfunction Installation() {\n  return (\n    <section>\n      <h2>Installation and Usage</h2>\n      <p>Honestly, it's as simple as one two three.</p>\n      <SyntaxHighlighter language='bash' style={styles.a11yDark}>\n        {`yarn add react-alert-async`}\n      </SyntaxHighlighter>\n      <p>And then in your little index file you just add the Provider</p>\n      <SyntaxHighlighter language='javascript' style={styles.a11yDark}>\n        {`import AlertProvider, {alert, confirm, prompt} from 'react-alert-async';\nimport 'react-alert-async/dist/index.css'\n\nfunction App() {\n  return (\n    <>\n      <AlertProvider />\n      <button onClick={()=>alert(\"Yay, it's an alert\", {duration: 2000, title: \"Custom Title\"})} />\n    </>\n  )\n}`}\n      </SyntaxHighlighter>\n    </section>\n  )\n}\n\nconst App = () => {\n  const [state, setState] = useState(\"Nothing's been prompted\")\n  return (\n    <>\n      <AlertProvider />\n      <div className='wrapper'>\n        <h1>\n          <span role='icon'>\n            <img src={require('./icon.png')} />\n          </span>{' '}\n          React Alert Async\n        </h1>\n        <h2>\n          A simple way of managing your alerts, prompts and confirms without\n          defaulting to the browsers ugly implementations\n        </h2>\n        <div className='sections'>\n          <Installation />\n          <Alert />\n          <AlertWithCustomBody />\n          <Confirm />\n          <Prompt />\n          <Styling />\n        </div>\n        <Footer />\n      </div>\n    </>\n  )\n}\n\nexport default App\n","import './styles/index.scss'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}