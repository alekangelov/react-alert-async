{"version":3,"sources":["icon.png","../../src/alertSystem/Alert.tsx","../../src/alertSystem/AlertProvider.tsx","App.jsx","index.tsx"],"names":["module","exports","require","unmountComponentAtNode","CustomAlert","props","useState","styles","handleClick","value","parent","document","setAnimation","setTimeout","React","console","className","style","animationDuration","prompt","promptState","onChange","e","setPrompt","type","onClick","a","Promise","render","resolve","reject","text","confirm","id","alertProvider","Alert","state","setState","code","setCode","alert","duration","x","log","showLineNumbers","language","Prompt","Confirm","Footer","href","Styling","Installation","App","role","src","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.217ad3f7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icon.b03f83cd.png\";","import React, { useState } from 'react'\nconst { render, unmountComponentAtNode } = require('react-dom')\nimport styles from '../scss/alert.scss'\ninterface AlertProps {\n  text: string\n  cancellable?: boolean\n  onClick: (value: boolean | string) => void\n  className: string\n  duration: number\n  prompt?: boolean\n  confirm?: boolean\n  title?: string\n}\ninterface Options {\n  className: string\n  title?: string\n  duration: number\n}\n\nconst CustomAlert = (props: AlertProps) => {\n  const [animation, setAnimation] = useState<any>(styles.animationIn)\n  const [promptState, setPrompt] = useState('')\n  const handleClick = (value: boolean) => {\n    const parent = document.getElementById(styles.alertProvider) as HTMLElement\n    if (props.prompt) {\n      if (value) {\n        props.onClick(promptState)\n      } else {\n        props.onClick(value)\n      }\n    } else {\n      props.onClick(value)\n    }\n    setAnimation(styles.animationOut)\n    setTimeout(() => {\n      unmountComponentAtNode(parent)\n    }, (props.duration || 500) - 50)\n  }\n  React.useEffect(() => {\n    setTimeout(() => setAnimation(styles.animationHold), props.duration || 500)\n  }, [])\n  console.log(props)\n  return (\n    <div className={[styles.alert, 'alert'].join(' ')}>\n      <div\n        style={{ animationDuration: `${(props.duration || 500) / 1000}s` }}\n        className={[styles['alert-inner'], 'alert-inner', animation].join(' ')}\n      >\n        {props.title ? (\n          <h4 className='alert-title'>{props.title}</h4>\n        ) : (\n          <h4 className='alert-title'>\n            <React.Fragment>\n              {props.prompt && 'Please fill in the input'}\n              {props.confirm && 'Please confirm'}\n              {!props.prompt && !props.confirm && 'Alert'}\n            </React.Fragment>\n          </h4>\n        )}\n        <p className='alert-text'>{props.text}</p>\n        {props.prompt && (\n          <div className={styles.prompt}>\n            <input\n              value={promptState}\n              onChange={(e) => setPrompt(e.target.value)}\n              className={[styles.input, 'alert-input'].join(' ')}\n              type='text'\n            />\n          </div>\n        )}\n        <div className={[styles.buttons, 'alert-buttons'].join(' ')}>\n          <button\n            className={[styles.ok, 'alert-buttons_ok'].join(' ')}\n            onClick={() => handleClick(true)}\n          >\n            OK\n          </button>\n          {(props.confirm || props.prompt) && (\n            <button\n              className={[styles.cancel, 'alert-buttons_cancel'].join(' ')}\n              onClick={() => handleClick(false)}\n            >\n              Cancel\n            </button>\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport async function alert(text: string, options: Options) {\n  const parent = document.getElementById(styles.alertProvider) as HTMLElement\n  return new Promise((resolve, reject) => {\n    render(\n      <CustomAlert\n        onClick={(e) => (e ? resolve(e) : reject(e))}\n        text={text}\n        prompt={false}\n        {...options}\n      />,\n      parent\n    )\n  })\n}\nexport async function confirm(text: string, options: Options) {\n  const parent = document.getElementById(styles.alertProvider) as HTMLElement\n  return new Promise((resolve, reject) => {\n    render(\n      <CustomAlert\n        onClick={(e) => (e ? resolve(e) : reject(e))}\n        text={text}\n        confirm={true}\n        {...options}\n      />,\n      parent\n    )\n  })\n}\nexport async function prompt(text: string, options: Options) {\n  const parent = document.getElementById(styles.alertProvider) as HTMLElement\n  return new Promise((resolve, reject) => {\n    render(\n      <CustomAlert\n        onClick={(e) => (e ? resolve(e) : reject())}\n        text={text}\n        prompt={true}\n        {...options}\n      />,\n      parent\n    )\n  })\n}\n","import React from 'react'\nimport styles from '../scss/alert.scss'\nexport default function AlertProvider() {\n  return <div id={styles.alertProvider} className='Alert-provider'></div>\n}\n","import React, { useState } from 'react'\nimport AlertProvider, { alert, confirm, prompt } from 'react-alert-async'\nimport 'react-alert-async/dist/index.css'\n\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter'\nimport * as styles from 'react-syntax-highlighter/dist/esm/styles/prism'\n\nfunction Alert() {\n  const [state, setState] = useState(\"Nothing's been alerted\")\n  const [code, setCode] = useState(false)\n  const codestring = `async () => {\n    try {\n      const x = await alert('Something')\n      console.log(x)\n      setState('Yay, so you read all that')\n    } catch (e) {\n      // won't actually get here\n    }\n    // now that was simple?\n  }`\n  return (\n    <section>\n      <h2>Alerts</h2>\n      <p>Alerts are simple, you have to click yes on them</p>\n      <div className='state'>\n        <p>{state}</p>\n      </div>\n      <div className='buttons'>\n        <button\n          onClick={async () => {\n            try {\n              const x = await alert('Idk write something meaningful here', {\n                duration: 500\n              })\n              console.log(x)\n              setState('Yay, so you read all that')\n            } catch (e) {\n              console.log('here2')\n              setState(\"Oh, we're sorry about that :(\")\n            }\n          }}\n        >\n          Make an alert\n        </button>\n        <button onClick={() => setCode((code) => !code)}>\n          {code ? 'Hide' : 'Show'} Code\n        </button>\n      </div>\n      {code && (\n        <SyntaxHighlighter\n          showLineNumbers\n          style={styles.a11yDark}\n          language='javascript'\n        >\n          {codestring}\n        </SyntaxHighlighter>\n      )}\n    </section>\n  )\n}\nfunction Prompt() {\n  const [state, setState] = useState(\"Nothing's been prompted\")\n  const [code, setCode] = useState(false)\n  const codestring = `async () => {\n    try {\n      const x = await prompt(\"What's your name?\")\n      setState('Your name is: ' + x)\n    } catch (e) {\n      setState('Oh dang, we didnt get your name :(')\n    }\n  }`\n  return (\n    <section>\n      <h2>Prompts</h2>\n      <p>\n        Prompts are like confirms, but you get what the user typed in the box.\n        Or the user can deny them.\n      </p>\n      <div className='state'>\n        <p>{state}</p>\n      </div>\n      <div className='buttons'>\n        <button\n          onClick={async () => {\n            try {\n              const x = await prompt(\"What's your name?\")\n              setState('Your name is: ' + x)\n            } catch (e) {\n              setState('Oh dang, we didnt get your name :(')\n            }\n          }}\n        >\n          Make a prompt\n        </button>\n        <button onClick={() => setCode((code) => !code)}>\n          {code ? 'Hide' : 'Show'} Code\n        </button>\n      </div>\n      {code && (\n        <SyntaxHighlighter\n          showLineNumbers\n          style={styles.a11yDark}\n          language='javascript'\n        >\n          {codestring}\n        </SyntaxHighlighter>\n      )}\n    </section>\n  )\n}\nfunction Confirm() {\n  const [state, setState] = useState(\"Nothing's been confirmed, nor denied\")\n  const [code, setCode] = useState(false)\n  const codestring = `async () => {\n    try {\n      await confirm(\"Read some of the things we've written\")\n      setState('Yay, so you read all that')\n    } catch (e) {\n      setState(\"Oh, we're sorry about that :(\")\n    }\n  }`\n  return (\n    <section>\n      <h2>Confirms</h2>\n      <p>Confirms are pretty self explanatory. You can confirm or deny them.</p>\n      <div className='state'>\n        <p>{state}</p>\n      </div>\n      <div className='buttons'>\n        <button\n          onClick={async () => {\n            try {\n              await confirm(\"Read some of the things we've written\")\n              setState('Yay, so you read all that')\n            } catch (e) {\n              setState(\"Oh, we're sorry about that :(\")\n            }\n          }}\n        >\n          Make a confirm\n        </button>\n        <button onClick={() => setCode((code) => !code)}>\n          {code ? 'Hide' : 'Show'} Code\n        </button>\n      </div>\n      {code && (\n        <SyntaxHighlighter\n          showLineNumbers\n          style={styles.a11yDark}\n          language='javascript'\n        >\n          {codestring}\n        </SyntaxHighlighter>\n      )}\n    </section>\n  )\n}\n\nfunction Footer() {\n  return (\n    <footer>\n      <div className='first'>\n        <p>Developed and Maintained by Alek Angelov</p>\n      </div>\n      <ul className='second'>\n        <li>\n          <a href='#'>NPM</a>\n        </li>\n        <li>\n          <a href='#'>GITHUB</a>\n        </li>\n        <li>\n          <a href='https://alekangelov.com'>WEBSITE</a>\n        </li>\n      </ul>\n    </footer>\n  )\n}\n\nfunction Styling() {\n  return (\n    <section>\n      <h2>Styling</h2>\n      <p>\n        It's pretty easy to style the components, they follow simple naming\n        structures and it's encouraged to write your own styles.\n      </p>\n      <SyntaxHighlighter language='css' style={styles.a11yDark}>\n        {`.alert {\n  /* this is the background of the alert */\n  &-inner {\n    /* body wrapper of the alert */\n  }\n  &-title {\n    /* title of the alert */\n  }\n  &-text {\n    /* text describer of the alert */\n  }\n  &-input {\n    /* the prompt input field */\n  }\n  &-buttons {\n    /* button wrapper of the alert */\n    &_ok {\n      /* ok button of the alert */\n    }\n    &_cancel {\n      /* cancel button of the alert */\n    }\n  }\n}`}\n      </SyntaxHighlighter>\n    </section>\n  )\n}\n\nfunction Installation() {\n  return (\n    <section>\n      <h2>Installation and Usage</h2>\n      <p>Honestly, it's as simple as one two three.</p>\n      <SyntaxHighlighter language='bash' style={styles.a11yDark}>\n        {`yarn add react-alert-async`}\n      </SyntaxHighlighter>\n      <p>And then in your little index file you just add the Provider</p>\n      <SyntaxHighlighter language='javascript' style={styles.a11yDark}>\n        {`import AlertProvider, {alert, confirm, prompt} from 'react-alert-async';\nimport 'react-alert-async/dist/index.css'\n\nfunction App() {\n  return (\n    <>\n      <AlertProvider />\n      <button onClick={()=>alert(\"Yay, it's an alert\", {duration: 2000, title: \"Custom Title\"})} />\n    </>\n  )\n}`}\n      </SyntaxHighlighter>\n    </section>\n  )\n}\n\nconst App = () => {\n  const [state, setState] = useState(\"Nothing's been prompted\")\n  return (\n    <>\n      <AlertProvider />\n      <div className='wrapper'>\n        <h1>\n          <span role='icon'>\n            <img src={require('./icon.png')} />\n          </span>{' '}\n          React Alert Async\n        </h1>\n        <h2>\n          A simple way of managing your alerts, prompts and confirms without\n          defaulting to the browsers ugly implementations\n        </h2>\n        <div className='sections'>\n          <Installation />\n          <Alert />\n          <Confirm />\n          <Prompt />\n          <Styling />\n        </div>\n        <Footer />\n      </div>\n    </>\n  )\n}\n\nexport default App\n","import './styles/index.scss'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}